extends layout

block content
  div(class="p-4 main-container")
    h1 #{title}
    hr
    form(class="form-group d-flex flex-column" action="" method="POST" enctype="multipart/form-data")
        label(for="name") #[strong Name:]
        input(class="form-input mb-3" id="name" name="name" placeholder="Elden Ring, Nier:Automata, Mario Kart etc." value=(game===undefined ? '' : game.name) required="true" type="text" autofocus)

        label(for="description") #[strong Description:]
        textarea(class="form-input mb-3" id="description" name="description" placeholder="Description - Max. 400 characters" value=(game===undefined ? '' : game.description) required="true" type="textarea")

        label(for="price") #[strong Price:]
        input(class="form-input mb-3" id="price" name="price" placeholder="39.99" value=(game===undefined ? '' : game.price) min="0" required="true" type="number")

        label(for="number_in_stock") #[strong Number in stock:]
        input(class="form-input mb-3" id="number_in_stock" name="number_in_stock" placeholder="0" value=(game===undefined ? '' : game.number_in_stock) min="0" required="true" type="number")

        label(for="release_date") #[strong Initial release date:]
        input(class="form-input mb-3" id="release_date" name="release_date" value=(game===undefined ? '' : game.release_date) required="true" type="date")

        label(for="developer") #[strong Developer:]
        select(class="bg-white form-input mb-3" id="developer" name='developer' placeholder='Select author' required='true' type='select')
            - developers.sort((a, b) => {let textA = a.name.toUpperCase(); let textB = b.name.toUpperCase(); return (textA < textB) ? -1 : (textA > textB) ? 1 : 0});
            for developer in developers
              if game
                option(value=developer._id selected=(developer._id.toString()===game.developer._id.toString() ? 'selected' : false) ) #{developer.name}
              else
                option(value=developer._id) #{developer.name}
        
        label(for="platform") #[strong Platform:]
        div(class="checkbox-list mb-3")
          for platform in platforms
            div(class="checkbox-container")
              input(name='platform' id=platform._id value=platform._id checked=platform.checked type='checkbox')
              p(class="checkbox") &#10004;
              label(for=platform._id) #{platform.name}
            
        label(for="genre") #[strong Genre:]
        div(class="checkbox-list mb-3")
          for genre in genres
            div(class="checkbox-container")
              input(name='genre' id=genre._id value=genre._id checked=genre.checked type='checkbox')
              p(class="checkbox") &#10004;
              label(for=genre._id) #{genre.name}
              
        label(for="game_image") #[strong Image:]
        input(class="form-input file-input mb-3" id="game_image" name="game_image" value=(game===undefined ? '' : game.image) type="file")

        button(class="action-btn" type="submit") Submit

    if errors
      ul
        for error in errors
          li!= error.msg